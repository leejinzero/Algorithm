import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/**
 * @Author leejinyoung
 * @Date  May 22, 2020
 * @Language java
 * @Memory 	24244KB
 * @RunningSpeed 1270ms
 * @Description dfs+백트래킹 문제(이렇게 안하고 줄단위로 하면 더 빠를 것!)
 * 
 */
public class SWEA_2112_보호필름 {

	private static int[][] map;
	private static int K;
	private static int D;
	private static int W;
	private static int[][] copy;

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		//BufferedReader bf = new BufferedReader(new StringReader(src));
		int T = Integer.parseInt(bf.readLine());
		StringBuilder sb = new StringBuilder();
		
		for (int tc = 1; tc <= T; tc++) {
			sb.append("#").append(tc).append(" ");
			StringTokenizer tks = new StringTokenizer(bf.readLine());
			D = Integer.parseInt(tks.nextToken()); //층 수
			W = Integer.parseInt(tks.nextToken()); //칼럼 수
			K = Integer.parseInt(tks.nextToken()); //합격 기준
			
			map = new int[D][W];
			copy = new int[D][W];
			
			for (int i = 0; i < D; i++) {
				tks = new StringTokenizer(bf.readLine());
				for (int j = 0; j < W; j++) {
					copy[i][j]=map[i][j] = Integer.parseInt(tks.nextToken());
				}
			}
			
			if(isTrue()) {
				sb.append(0).append("\n");
				continue;
			}
			
			flag =false;
			min = Integer.MAX_VALUE;
			for (int i = 1; i < K; i++) {
				tem = new int[i];
				combi(0,0,i);
				if(flag) {
					min=i;
					break;
				}
			}
			if(min==Integer.MAX_VALUE) min=K;
			sb.append(min).append("\n");
		}
		System.out.println(sb);
	}
	
	static int min;
	static boolean flag;
	static int[] tem ;
	//조합 pick개 만큼 행뽑기
	private static void combi(int idx, int before, int pick) {
		if(flag) return;
		
		if(idx==pick) {
			change();
			
			return;
		}
		
		for (int i = before; i < D; i++) {
			tem[idx] = i;
			combi(idx+1,i+1,pick);
		}
	}

	//연속이 만족하는지 체크 함수
	private static boolean isTrue() {
		
here:	for (int i = 0; i < W; i++) {
			int max=1;
			int stand=copy[0][i];
			int cnt=1;
			for (int j = 1; j <D; j++) {
				if(copy[j][i]==stand) {
					cnt++;
					if(cnt>=K) {
						continue here;
					}
				}
				else {
					max=Math.max(cnt, max);
					cnt=1;
					stand=copy[j][i];
				}
			}
			
			if(max<K) return false;
		}
		
		return true;
	}

	private static void change() {
		
		for (int i = 0; i < (1<<tem.length); i++) {
			copymap();
			int num=0;
			for (int j = 0; j < tem.length; j++) {
				if((i&1<<j)>0) {
					num=1;
				}else {
					num=0;
				}
				
				for (int k = 0; k <W; k++) {
					copy[tem[j]][k]=num;
				}
			}
						
			if(isTrue()) {
				flag=true;
				min=tem.length;
				return ;
			}
			
		}
		
	}

	private static void copymap() {
		for (int i = 0; i < D; i++) {
			for (int j = 0; j < W; j++) {
				copy[i][j] = map[i][j];
			}
		}
		
	}

	private static String src = "10\n" + 
			"6 8 3\n" + 
			"0 0 1 0 1 0 0 1\n" + 
			"0 1 0 0 0 1 1 1\n" + 
			"0 1 1 1 0 0 0 0\n" + 
			"1 1 1 1 0 0 0 1\n" + 
			"0 1 1 0 1 0 0 1\n" + 
			"1 0 1 0 1 1 0 1\n" + 
			"6 8 3\n" + 
			"1 1 1 1 0 0 1 0\n" + 
			"0 0 1 1 0 1 0 1\n" + 
			"1 1 1 1 0 0 1 0\n" + 
			"1 1 1 0 0 1 1 0\n" + 
			"1 1 0 1 1 1 1 0\n" + 
			"1 1 1 0 0 1 1 0\n" + 
			"6 8 4\n" + 
			"1 1 0 0 0 1 1 0\n" + 
			"1 0 1 0 0 1 1 1\n" + 
			"0 1 0 0 1 1 0 0\n" + 
			"1 0 1 0 0 0 0 0\n" + 
			"1 1 0 0 0 0 0 0\n" + 
			"1 0 0 0 1 1 1 1\n" + 
			"6 4 4\n" + 
			"1 1 0 0\n" + 
			"0 1 0 1\n" + 
			"0 0 0 1\n" + 
			"1 1 1 1\n" + 
			"1 1 0 1\n" + 
			"1 0 1 0\n" + 
			"6 10 3\n" + 
			"0 1 0 0 0 1 0 0 1 1\n" + 
			"0 1 1 0 0 1 0 0 1 0\n" + 
			"0 1 0 0 1 0 1 1 1 1\n" + 
			"0 0 0 0 0 1 1 1 1 0\n" + 
			"0 1 0 0 1 1 1 1 1 1\n" + 
			"1 0 0 0 1 1 0 0 1 1\n" + 
			"6 6 5\n" + 
			"0 0 0 0 0 0\n" + 
			"0 0 0 0 0 0\n" + 
			"0 0 0 0 0 0\n" + 
			"0 0 0 0 0 0\n" + 
			"0 0 0 0 0 0\n" + 
			"0 0 0 0 0 0\n" + 
			"6 6 4\n" + 
			"1 1 1 1 1 1\n" + 
			"0 0 0 0 0 1\n" + 
			"0 1 1 1 0 1\n" + 
			"0 1 0 1 0 1\n" + 
			"0 1 0 0 0 1\n" + 
			"0 1 1 1 1 1\n" + 
			"8 15 3\n" + 
			"0 1 1 0 0 1 1 0 1 1 0 0 0 0 0\n" + 
			"1 0 0 0 1 1 0 0 0 0 0 1 0 1 1\n" + 
			"1 1 0 1 0 1 0 1 0 1 0 1 0 0 0\n" + 
			"0 1 1 1 0 0 1 0 0 0 0 1 0 0 0\n" + 
			"0 0 0 0 0 0 1 0 0 0 1 1 0 0 1\n" + 
			"1 0 1 0 0 1 0 1 1 1 1 0 1 1 1\n" + 
			"0 0 0 0 0 1 1 1 0 0 0 0 0 1 0\n" + 
			"0 0 1 0 1 1 0 1 1 0 0 0 1 0 0\n" + 
			"10 20 4\n" + 
			"1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1\n" + 
			"1 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 0 0 1 0\n" + 
			"1 1 0 1 1 0 0 0 1 1 1 1 1 0 0 1 1 0 1 0\n" + 
			"0 0 0 1 1 0 0 0 0 1 0 0 1 0 1 1 1 0 1 0\n" + 
			"0 1 1 0 1 0 1 0 1 0 0 1 0 0 0 0 1 1 1 1\n" + 
			"1 0 1 0 1 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0\n" + 
			"0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 1 1 0 1 1\n" + 
			"1 0 0 0 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 0\n" + 
			"0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1\n" + 
			"0 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 0\n" + 
			"13 20 5\n" + 
			"1 1 0 1 0 0 0 1 1 1 1 0 0 0 1 1 1 0 0 0\n" + 
			"1 1 1 1 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0\n" + 
			"1 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 1 0 1 0\n" + 
			"0 0 1 1 0 1 1 0 1 0 0 1 1 0 0 0 1 1 1 1\n" + 
			"0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 1\n" + 
			"0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1\n" + 
			"0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 1 0\n" + 
			"1 1 1 0 0 0 1 0 0 1 1 1 0 1 0 1 0 0 1 1\n" + 
			"0 1 1 1 1 0 0 0 1 1 0 1 0 0 0 0 1 0 0 1\n" + 
			"0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 1 1 1 1\n" + 
			"0 1 0 0 1 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0\n" + 
			"0 0 1 1 0 0 1 0 0 0 1 0 1 1 0 1 1 1 0 0\n" + 
			"0 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 1 0 1 0\n" + 
			"";

}
