import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class BJ_4485_녹색옷입은애가젤다지 {
	static class Pair implements Comparable<Pair>{
		int r,c,dis;

		public Pair(int r, int c, int dis) {
			this.r = r;
			this.c = c;
			this.dis = dis;
		}

		@Override
		public int compareTo(Pair o) {
			return Integer.compare(this.dis, o.dis);
		}
		
	}

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int cnt = 1;

		while (true) {
			int N = Integer.parseInt(bf.readLine());
			if (N == 0)
				break;
			sb.append("Problem " + cnt++ + ": ");

			int[][] map = new int[N][N];

			for (int r = 0; r < N; r++) {
				StringTokenizer tks = new StringTokenizer(bf.readLine());
				for (int c = 0; c < N; c++) {
					map[r][c] = Integer.parseInt(tks.nextToken());
				}
			}

			int[][] store = new int[N][N];
			int[][] dir = { { 1, 0 }, { 0, 1 }, { 0, -1 }, { -1, 0 } };

			for (int[] row : store) {
				Arrays.fill(row, Integer.MAX_VALUE / 2);
			}

			store[0][0] = map[0][0];
			PriorityQueue<Pair> pq = new PriorityQueue<>();
			pq.offer(new Pair(0,0,map[0][0]));
			
			while(!pq.isEmpty()) {
				Pair f = pq.poll();
				
				for (int i = 0; i < 4; i++) {
					int nr = f.r + dir[i][0];
					int nc = f.c + dir[i][1];

					if (isIn(nr, nc, N) && store[nr][nc] > store[f.r][f.c] + map[nr][nc]) {
						store[nr][nc] = store[f.r][f.c] + map[nr][nc];
						pq.offer(new Pair(nr,nc,store[nr][nc]));
					}
				}
				
			}
					
			sb.append(store[N - 1][N - 1]).append("\n");
		}

		System.out.println(sb);
	}

	private static boolean isIn(int nr, int nc, int N) {
		return nr >= 0 && nc >= 0 && nr < N && nc < N;
	}

}
